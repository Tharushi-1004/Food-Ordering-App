
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a1  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000859  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000215  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  0000140b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main(void)
{
		ADMUX &=~((1<<REFS1)) |((REFS0<<1));//AREF external voltage
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	80 83       	st	Z, r24
		ADMUX &=((1<<MUX0))|(1<<MUX1)|(1<<MUX2)|(1<<MUX3);//A0 selects
  8a:	80 81       	ld	r24, Z
  8c:	8f 70       	andi	r24, 0x0F	; 15
  8e:	80 83       	st	Z, r24
		ADCSRA |=((1<<ADEN))|((1<<ADPS0))|((ADPS1))|((ADPS2));//ADC enable,
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	83 68       	ori	r24, 0x83	; 131
  98:	80 83       	st	Z, r24
		
		DDRD |=0xFF; //define port D as output
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a b9       	out	0x0a, r24	; 10
		DDRB |=0x03;//define port B as o/p
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	83 60       	ori	r24, 0x03	; 3
  a4:	84 b9       	out	0x04, r24	; 4
    /* Replace with your application code */
    while (1) 
    {
		ADCSRA |=(1<<ADSC); //start conversion
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC));  //can be written as (ADSCRA & 0B01000000);Checking when ADC becomes 0
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b4:	86 fd       	sbrc	r24, 6
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <main+0x30>
		uint16_t adcValue =ADC;
  b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  bc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		PORTD =(uint8_t)adcValue;
  c0:	8b b9       	out	0x0b, r24	; 11
		
		//PORTD=ADC;
		PORTB=(PORTB & 0xFC)|((adcValue>>8)& 0x03);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8c 7f       	andi	r24, 0xFC	; 252
  c6:	93 70       	andi	r25, 0x03	; 3
  c8:	89 2b       	or	r24, r25
  ca:	85 b9       	out	0x05, r24	; 5
		
		
    }
  cc:	ec cf       	rjmp	.-40     	; 0xa6 <main+0x26>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
